from aiogram import Router
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery
from aiogram import F
from checkout.models import Order
from telegram.helpers import get_full_name, get_phone_number, is_paid, id_search, phone_rebuilder, \
    get_orders_queryset, prepare_order_message_and_keyboard, get_order_by_id, get_kb_from_order, get_orders_queryset_all

router = Router()

main = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='–û–±—Ä–∞–±–æ—Ç–∫–∞ üìù'), KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ üì¶')],
    [KeyboardButton(text='–ü–æ–∏—Å–∫ –ó–∞–∫–∞–∑–∞ üîç')],
], resize_keyboard=True, input_field_placeholder='–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é')

cancel_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å ‚¨ÖÔ∏è")]],
    resize_keyboard=True,
    input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ó–∞–≤–µ—Ä—à–∏—Ç—å"
)


class OrderSearch(StatesGroup):
    waiting_for_order_input = State()


@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±—ã—Å—Ç—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤! \n\n\n'
                         '‚úÖ –í—ã –±—É–¥–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö.\n'
                         '‚öôÔ∏è –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑–∞–º–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é.\n\n'
                         '‚ùóÔ∏è –ó–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ "–ó–∞–≤–µ—Ä—à–µ–Ω—ã" –∏–ª–∏ "–û—Ç–º–µ–Ω–µ–Ω—ã", –Ω–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ.', reply_markup=main)


@router.message(lambda message: message.text == "–ü–æ–∏—Å–∫ –ó–∞–∫–∞–∑–∞ üîç")
async def search_order(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è ‚úçÔ∏è", reply_markup=cancel_kb)
    await state.set_state(OrderSearch.waiting_for_order_input)



@router.message(OrderSearch.waiting_for_order_input, F.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å ‚¨ÖÔ∏è")
async def cancel_search(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=main)
    await state.clear()


@router.message(OrderSearch.waiting_for_order_input)
async def process_order_search(message: Message, state: FSMContext):
    search_input = message.text

    orders = await get_orders_queryset(search_input)

    if orders:
        for order in orders:
            text, kb = prepare_order_message_and_keyboard(order)
            await message.answer(text, reply_markup=kb.as_markup(), parse_mode="HTML")
    else:
        await message.answer(
            f'–ó–∞–∫–∞–∑—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å –∑–∞–ø—Ä–æ—Å–æ–º {search_input}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–≤–µ—Ä—à–∏—Ç—å"',
            reply_markup=cancel_kb)

    await state.set_state(OrderSearch.waiting_for_order_input)
    await message.answer(f'–ü—Ä–æ–¥–æ–ª–∂–∏–º –ø–æ–∏—Å–∫? üïµÔ∏è‚Äç‚ôÇÔ∏è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–≤–µ—Ä—à–∏—Ç—å ‚¨ÖÔ∏è"', reply_markup=cancel_kb)


@router.message((F.text == "–û–±—Ä–∞–±–æ—Ç–∫–∞ üìù") | (F.text == "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ üì¶"))
async def all_orders(message: Message):
    status_map = {
        "–û–±—Ä–∞–±–æ—Ç–∫–∞ üìù": 1,
        "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ üì¶": 2
    }

    status_id = status_map.get(message.text)
    orders = await get_orders_queryset_all(status_id)

    if orders:
        for order in orders:
            text, kb = prepare_order_message_and_keyboard(order)
            await message.answer(text, reply_markup=kb.as_markup(), parse_mode="HTML")
    else:
        await message.answer(f"–ó–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{message.text}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")


@router.callback_query(F.data.startswith('order_') & F.data.endswith('is_paid'))
async def set_order_paid(callback: CallbackQuery):
    order_id = callback.data.split("_")[1]
    await Order.objects.filter(id=order_id).aupdate(is_paid=True)

    order = await get_order_by_id(order_id)
    text, kb = prepare_order_message_and_keyboard(order)

    await callback.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")


@router.callback_query(F.data.startswith('order_') & F.data.endswith('status'))
async def status_for_order(callback: CallbackQuery):
    order_id = callback.data.split("_")[1]
    status_id = callback.data.split("_")[2]

    kb = get_kb_from_order(order_id, status_id)

    await callback.message.edit_reply_markup(reply_markup=kb.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith('set_status') & F.data.endswith('status_label'))
async def set_status_for_order(callback: CallbackQuery):
    order_id = callback.data.split("_")[2]
    status_id = callback.data.split("_")[4]
    await Order.objects.filter(id=order_id).aupdate(status=status_id)

    if int(status_id) not in [3, 4]:
        order = await get_order_by_id(order_id)
        text, kb = prepare_order_message_and_keyboard(order)
        await callback.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")
    else:
        await callback.message.delete()


@router.callback_query(F.data.startswith('set_status_') & F.data.endswith('status_exit'))
async def set_order_paid(callback: CallbackQuery):
    order_id = callback.data.split("_")[2]

    order = await get_order_by_id(order_id)
    text, kb = prepare_order_message_and_keyboard(order)

    await callback.message.edit_reply_markup(reply_markup=kb.as_markup())