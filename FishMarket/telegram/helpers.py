from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from asgiref.sync import sync_to_async
from django.db.models import Prefetch, Q
from checkout.models import Order, OrderItem
import re


def id_search(id_value):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0, –µ—Å–ª–∏ —á–∏—Å–µ–ª –Ω–µ—Ç."""
    number = ''.join([number for number in id_value if number.isdigit()])

    if number:
        return number
    else:
        return 0


def phone_rebuilder(phone_value):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+38(XXX)-XXX-XX-XX), –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç '1111111111' –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –≤–≤–æ–¥–µ."""
    digits = re.sub(r'[^0-9]', '', phone_value)

    if len(digits) == 12 and digits.startswith('38'):
        return f"+38({digits[2:5]})-{digits[5:8]}-{digits[8:10]}-{digits[10:12]}"
    elif len(digits) == 10:
        return f"+38({digits[0:3]})-{digits[3:6]}-{digits[6:8]}-{digits[8:10]}"
    return '1111111111'


def get_full_name(order):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≥–æ—Å—Ç—è, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å –∑–∞–∫–∞–∑–æ–º."""
    return order.user.name + ' ' + order.user.last_name if order.user else order.guest.name + ' ' + order.guest.last_name


def get_phone_number(order):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≥–æ—Å—Ç—è, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å –∑–∞–∫–∞–∑–æ–º."""
    return order.user.phone_number if order.user else order.guest.phone_number


def is_paid(order):
    """–°—Ç—Ä–æ–∫–∞ –¥–ª—è prepare_order_message_and_keyboard"""
    check = "‚úÖ"
    red_square = "üü•"

    return (check + '\n–û–ü–õ–ê–ß–ï–ù–û') if order.is_paid else (red_square + '\n–ù–ï –û–ü–õ–ê–ß–ï–ù–û')


def inline_main_kb(order):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –æ—Ä–¥–µ—Ä–∞"""
    inline_kb = InlineKeyboardBuilder()
    if not order.is_paid:
        inline_kb.row(
            InlineKeyboardButton(
                text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–∫ "–ó–∞–∫–∞–∑ –û–ø–ª–∞—á–µ–Ω" ‚úÖ',
                callback_data=f'order_{order.id}_is_paid'))

    inline_kb.row(InlineKeyboardButton(
        text='–ò–∑–º–µ–Ω–∏—Ç—å –°—Ç–∞—Ç—É—Å –ó–∞–∫–∞–∑–∞ üîÑ',
        callback_data=f'order_{order.id}_{order.status}_status'))

    return inline_kb


def prepare_order_message_and_keyboard(order):
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    inline_kb = inline_main_kb(order)

    order_items = ''
    for item in order.order_items.all():
        order_items += (f'<b>–ü—Ä–æ–¥—É–∫—Ç:</b> <i>{item.product.name}</i>\n'
                        f'–ö–æ–ª: <i>{item.quantity}</i> | –í–µ—Å: <i>{item.weight}</i> | –í—Å–µ–≥–æ: <i>{item.total_price}</i>\n')

    order_sting = (f'<b>–ó–∞–∫–∞–∑ ‚Ññ</b>{order.id} \n\n'
                   f'<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b> üöö\n<i>{order.delivery_address}</i>\n'
                   f'<b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å</b> üë§\n<i>{get_full_name(order)}</i>\n'
                   f'<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> üì±\n<i>{get_phone_number(order)}</i>\n\n'
                   f'<b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b> üí≥\n<i>{order.get_payment_method_display()}</i>\n'
                   f'<b>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞</b> üí∏\n<i>{order.cart_total} –≥—Ä–Ω</i>\n'
                   f'<b>–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã</b> <i>{is_paid(order)}</i>\n\n'
                   f'<b>–ó–∞–∫–∞–∑ –°–æ–∑–¥–∞–Ω</b> üïî \n<i>{order.created_at.strftime("%d.%m.%Y %H:%M")}</i>\n'
                   f'<b>–°—Ç–∞—Ç—É—Å –ó–∞–∫–∞–∑–∞</b> üîÑ \n<i>{order.get_status_display()}</i>\n\n'
                   f'<b>–ó–∞–∫–∞–∑</b> üõí\n'
                   f'<blockquote expandable>{order_items}</blockquote>\n')

    return order_sting, inline_kb


def get_kb_from_order(order_id, current_status):
    """–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞."""
    DeliveryOptions = Order.DeliveryOptions.choices

    builder = InlineKeyboardBuilder()

    for status_value, status_label in DeliveryOptions:
        if status_value != current_status:
            builder.row(InlineKeyboardButton(
                text=status_label,
                callback_data=f"set_status_{order_id}_status_{status_value}_{status_label}_status_label"
            ))
    builder.row(InlineKeyboardButton(
        text='–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è',
        callback_data=f"set_status_{order_id}_{current_status}_status_exit"
    ))

    return builder


@sync_to_async
def get_orders_queryset(search_input):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ ID) —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏."""
    phone = phone_rebuilder(search_input)

    orders = Order.objects.filter(Q(guest__phone_number__icontains=phone) |
                                  Q(user__phone_number__icontains=phone) | Q(id=id_search(search_input)),
                                  status__in=[1, 2]
                                  ).select_related("user", 'guest').prefetch_related(
        Prefetch('order_items', queryset=OrderItem.objects.select_related('product')))

    return [order for order in orders]


@sync_to_async
def get_order_by_id(order_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–¥–∏–Ω –∑–∞–∫–∞–∑ –ø–æ ID —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏."""

    order = Order.objects.filter(id=order_id, status__in=[1, 2]) \
        .select_related("user", "guest") \
        .prefetch_related(
        Prefetch('order_items',
                 queryset=OrderItem.objects.select_related('product'))
    ).first()

    return order

@sync_to_async
def get_orders_queryset_all(status_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –≤—Å–µ—Ö —á—Ç–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å –ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏."""

    orders = Order.objects.filter(status=status_id
                                  ).select_related("user", 'guest').prefetch_related(
        Prefetch('order_items', queryset=OrderItem.objects.select_related('product')))

    return [order for order in orders]


def test(order_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–¥–∏–Ω –∑–∞–∫–∞–∑ –ø–æ ID —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏."""

    order = Order.objects.filter(id=order_id, status__in=[1, 2]) \
        .select_related("user", "guest") \
        .prefetch_related(
        Prefetch('order_items',
                 queryset=OrderItem.objects.select_related('product'))
    ).first()

    return order
